# This workflow will build and push the SmartSuiteX website to an Azure Web App when a commit is pushed to your default branch.
#
# This workflow assumes you have already created the target Azure App Service web app.
# For instructions see https://docs.microsoft.com/en-us/azure/app-service/quickstart-nodejs?tabs=linux&pivots=development-environment-cli#create-a-project-zip-file

name: Build and deploy SmartSuiteX to Azure Web App

on:
  push:
    branches: [ "main", "master" ]
  workflow_dispatch:

env:
  AZURE_WEBAPP_NAME: 'SmartSuiteX'    # Azure app name from msdeploySite in publish profile
  AZURE_WEBAPP_PACKAGE_PATH: '.'         # set this to the path to your web app project, defaults to the repository root
  NODE_VERSION: '18.x'                   # set this to the node version to use

permissions:
  contents: read

jobs:
  build:
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout repository
      uses: actions/checkout@v4

    - name: Set up Node.js
      uses: actions/setup-node@v4
      with:
        node-version: ${{ env.NODE_VERSION }}
        cache: 'npm'
        cache-dependency-path: |
          package-lock.json
          smartsuitex-website/shadcn-ui/package-lock.json

    - name: Install root dependencies
      run: |
        if [ -f package-lock.json ]; then npm ci; else npm install; fi

    - name: Install React app dependencies
      run: |
        cd smartsuitex-website/shadcn-ui
        if [ -f package-lock.json ]; then npm ci; else npm install; fi

    - name: Build SmartSuiteX React application
      run: |
        cd smartsuitex-website/shadcn-ui
        npm run build
        echo "Build completed"
        ls -la dist/

    - name: Create deployment package
      run: |
        echo "üöÄ Creating deployment package..."
        
        # Remove any existing deployment directory
        rm -rf deployment
        mkdir deployment
        
        # Copy ALL built files directly
        echo "üì¶ Copying React build files..."
        cp -r smartsuitex-website/shadcn-ui/dist/* deployment/
        
        # Verify critical files exist
        if [ ! -f "deployment/index.html" ]; then
          echo "‚ùå CRITICAL ERROR: index.html not found!"
          exit 1
        fi
        
        if [ ! -f "deployment/web.config" ]; then
          echo "‚ö†Ô∏è web.config not found in dist, copying from root..."
          cp web.config deployment/ 2>/dev/null || echo "No web.config in root either"
        fi
        
        # Final verification
        echo "‚úÖ Deployment package created!"
        echo "üìÅ Package contents:"
        find deployment/ -type f | head -20
        echo "üìä Package size:"
        du -sh deployment/
        echo "üîç Critical files check:"
        ls -la deployment/index.html deployment/web.config 2>/dev/null || echo "Some files missing"

    - name: Upload artifact for deployment job
      uses: actions/upload-artifact@v4
      with:
        name: node-app
        path: deployment
        retention-days: 1

  deploy:
    permissions:
      contents: none
    runs-on: ubuntu-latest
    needs: build
    environment:
      name: 'Production'
      url: ${{ steps.deploy-to-webapp.outputs.webapp-url }}
    if: github.ref == 'refs/heads/master' && github.event_name == 'push'

    steps:
    - name: Download artifact from build job
      uses: actions/download-artifact@v4
      with:
        name: node-app
        path: ./deployment

    - name: List downloaded files
      run: |
        echo "üì¶ Downloaded files:"
        ls -la ./deployment/
        echo "üìÑ Verifying critical files:"
        if [ -f "./deployment/index.html" ]; then
          echo "‚úÖ index.html exists"
          head -5 ./deployment/index.html
        else
          echo "‚ùå index.html missing!"
        fi
        if [ -f "./deployment/web.config" ]; then
          echo "‚úÖ web.config exists"
        else
          echo "‚ùå web.config missing!"
        fi

    - name: 'Deploy to Azure Web App'
      id: deploy-to-webapp
      uses: azure/webapps-deploy@v3
      with:
        app-name: ${{ env.AZURE_WEBAPP_NAME }}
        slot-name: 'Production'
        package: './deployment'
        publish-profile: ${{ secrets.AZURE_WEBAPP_PUBLISH_PROFILE }}
        clean: true

    - name: 'Post-Deployment Verification'
      run: |
        echo "üöÄ Deployment completed successfully!"
        echo ""
        echo "üìç Deployment Details:"
        echo "   ‚Ä¢ App Name: ${{ env.AZURE_WEBAPP_NAME }}"
        echo "   ‚Ä¢ Package: ./deployment"
        echo "   ‚Ä¢ Files deployed: $(find ./deployment -type f | wc -l)"
        echo ""
        echo "üåê Your SmartSuiteX website should now be available at:"
        echo "   ‚Ä¢ Azure URL: https://smartsuitex-fegtdvcrhmfsfccw.centralus-01.azurewebsites.net"
        echo "   ‚Ä¢ Custom domain: https://smartsuitex.com"
        echo ""
        echo "‚è±Ô∏è Note: It may take 2-5 minutes for changes to appear due to caching."
        echo "üîÑ If you still see the Microsoft page, try:"
        echo "   1. Wait 5 minutes and refresh"
        echo "   2. Clear browser cache (Ctrl+F5)"
        echo "   3. Try incognito/private browsing mode"